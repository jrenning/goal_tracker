// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model Goals {
    id Int @id @default(autoincrement())
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    name String
    points Int
    created_at DateTime @default(now())
    difficulty Int
    completed Boolean
    category Category
    date_completed DateTime?
    due_date DateTime?
    repeat RepeatData?
    checklist CheckListItem[]
    exp_multiplier Float @default(1)
    gold_multiplier Float @default(1)

}

model CheckListItem {
    id Int @id @default(autoincrement())
    goal_id Int 
    goal Goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)
    name String
    completed Boolean
    date_completed DateTime?

}

enum RepeatTypes {
    Daily
    Weekly
    Monthly
    Yearly
}

enum DayOfWeek {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

model RepeatData {
    goal_id Int @unique @id
    goal Goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)
    type RepeatTypes
    days DayOfWeek[]
    repeat_frequency Int @default(1)
    start_date DateTime @default(now())
    last_repeated DateTime?
    stop_date DateTime?

}

model ShopRepeatData {
    item_id Int @unique @id
    item ShopItem @relation(fields: [item_id], references: [id], onDelete: Cascade)
    type RepeatTypes
    days DayOfWeek[]
    repeat_frequency Int @default(1)
    start_date DateTime @default(now())
    last_repeated DateTime?
    stop_date DateTime?

}

enum Rarity {
    Common
    Rare
    Epic
    Legendary
}

model ShopItem {
    id Int @id @default(autoincrement())
    inventory Inventory @relation(fields: [user_id], references: [user_id])
    user_id String
    name String
    cost Int
    rarity Rarity @default(Common)
    reward_category RewardCategories
    created_at DateTime @default(now())
    expire_at DateTime?
    bought Boolean
    discount_multiplier Float @default(1)
    repeat ShopRepeatData?

}

model Inventory {
    user_id String @id
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    items ShopItem[]
    coins Int
}

enum Category {
    Physical
    Education
    Social
    Hobby
    Career
}

enum RewardCategories {
    Outdoors
    Food
    Gift
    Leisure
    Experience
}

model Rewards {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    level Int
    category Category
    rewards String[]
    reward_category RewardCategories[]
    created_at DateTime @default(now())
    achieved_at DateTime?
    @@id([user_id, level, category])
}

model Levels {
    number Int @id
    created_at DateTime @default(now())
    points Int
}


model Stats {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    category Category
    current_points Int @default(0)
    total_points Int @default(0)
    level Int @default(1)

    @@id([user_id, category])
}

model PointsData {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    category Category
    points Int @default(0)
    date DateTime @default(now())

    @@id([user_id, category, points])
}

model LevelData {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    category Category
    level Int @default(1)
    date DateTime @default(now())

    @@id([user_id, category, level])
}

enum EventTypes {
    ADD_POINTS
    GAIN_LEVEL
    COMPLETE_GOAL
    DELETE_GOAL
    GAIN_REWARD
    CREATE_GOAL_BASIC
    CREATE_GOAL_DUE_DATE
    CREATE_GOAL_REPEATING
    COMPLETE_CHECKLIST_ITEM
    BUY_SHOP_ITEM
    CREATE_SHOP_ITEM_BASIC
    CREATE_SHOP_ITEM_REPEATING

    

}

model Events {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    id Int @id @default(autoincrement())
    event EventTypes
    value Int
    goal_category Category
    reward_category RewardCategories?
    created_at DateTime @default(now())
}

enum TimeFrame {
    Day
    Week
    Month
    Year
    None
}


model Achievement {
    name String @unique @id
    event EventTypes
    value Int
    time_frame TimeFrame @default(None)
    goal_category Category
    reward_category RewardCategories?
    created_at DateTime @default(now())
    users UserAchievement[]
} 

model UserAchievement {
    user_id String
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    achievement_name String
    acheivement Achievement @relation(fields: [achievement_name], references: [name])
    completed Boolean
    current_value Int @default(0)

    @@id([user_id, achievement_name])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    created_at    DateTime  @default(now())
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    stats Stats[]
    rewards Rewards[]
    goals Goals[]
    points_data PointsData[]
    level_data LevelData[]
    events Events[]
    inventory Inventory?
    achievements UserAchievement[]
    last_points_added DateTime?
    
    subscription Json?
}


// AUTH //

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
